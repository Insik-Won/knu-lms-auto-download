◎ 결과물
  - 소스코드
  - 사용법(readme.txt)
  - 보고서 - 프로젝트 개요, 상세 구조 및 동작 흐름도, 결과 참고자료
  - 발표/데모 도영상

◎ 필수 기능
  - 쉘스크립트(make, 프로그램 자동실행 등)
  - 타이머 signal 사용
  - 타이머 외 signal 사용(키보드제어, IPC 등)
  - 2개 이상의 process로 구성(fork)

◎ 주제
  - HTTPS를 이용한 lms 강의자료/과제자료 다운로드 받기

◎ 필수 기능 구현
  - 쉘스크립트: make 및 쉘 스크립트로 프로그램 실행
  - 타이머 signal 사용: 로딩 중 텍스트에 사용
  - 타이머 외 signal 사용: 인터럽트가 나올 시 현재 파일 정리하기
  - 2개 이상의 프로세스: 자식 프로세스는 다운로드, 부모는 로딩 중 텍스트 출력

◎ 기능 목록
  - 강의자료와 과제자료는 따로 프로그램을 만든다.
  - 필수 인자: ID, password, 과목명, 게시글명/게시글번호/게시글순번, 다운로드할 디렉토리
  - 추가 인자: 압축파일 해제 여부, 침묵 여부, 강제 여부, 무시할 경로패턴

◎ 인자 입력 방식
  - ID: 옵션 입력(-U, --userId), 명시되지 않으면 사용자가 직접 프로그램에 입력
  - password: 옵션 입력(-P, --pasword), 명시되지 않으면 사용자가 직접 프로그램에 입력(출력x), 비추천
  - 과목명: 필수 입력(첫번째), 일반 인자로 문자열 입력
  - 게시글 정보
    - 게시글명: 옵션 입력(--postname), 패턴식
    - 게시글번호: 옵션 입력(--postnum), 게시글의 번호
    - 게시글순번: 옵션 입력(--postorder, -p), 최근순, 1-based
    - 역순 적용: 옵션 입력(-r, --reverse), 게시글 번호, 게시글 순번 적용
    - 게시글 정보가 없다면 가장 최근 게시글을 다운로드함
    - 충돌 시 경고(마지막 적용)
  - 다운로드 디렉토리: 일반 입력(두번째)/옵션 입력(-D, --directory), 없으면 현재 디렉토리에 다운로드
  - 압축파일 해제 여부: 옵션 입력(-z, --unzip), zip, tar 지원(7z도 된다면 지원하기)
  - 침묵/강제 여부: 옵션 입력(-q, --quiet, -f, --forced), 선택사항
  - 무시할 경로 패턴: 일반 입력(세번째)/옵션 입력(--ignore), 선택 사항

◎ 현재 알아야 할 것
  - o 로그인/로그아웃 방식
  - o 수강과목 목록/포스트 접근 방식
  - o 포스트의 첨부파일 접근 방식
  - o css selector in linux
    - hxnormalize를 사용한다.
  - o 실행 파일을 기본 실행 파일로 옮기는 방법
  - o make, cmake 다루기
  - o 긴 옵션 처리
  - zip, tar, 7z 압축 해재 방식
  - o 경로 패턴 처리 방식 in c

◎ LMS 크롤링 방법
  - http 요청 쉘스크립트 파일
    - 1. 로그인.sh
      - POST https://lms.knu.ac.kr/ilos/lo/login.acl
      - x-www-form-urlencoded로 usr_id={id}&usr_pwd{pwd}를 넣는다.
      - isError가 false면 정상, true면 오류
      - 과목 접근 권한을 얻는다.
    - 2. 메인.sh
      - GET https://lms.knu.ac.kr/ilos/main/main_form.acl
      - 쿠키 유지해서 요청
      - #contentsIndex > div.index-leftarea02 > div:nth-child(2) > ol > li:nth-child(n+1) > em의 kj 속성에서 과목 ID를 얻을 수 있다. (여기서 n은 과목의 순번)
    - 3. 개인정보.sh
      - GET https://lms.knu.ac.kr/ilos/mp/myinfo_form.acl
      - 쿠키 유지
      - #uploadForm > div:nth-child(5) > table > tbody > tr:nth-child(1) > td:nth-child(2)의 innerText에서 학생의 학번을 얻을 수 있다.      
      - 정규화 시 -> '#content_text > div:nth-child(1) > div:nth-child(6) > table > tbody > tr:nth-child(1) > td:nth-child(2)' -> 목록을 얻을 수 있다.
    - 4. 과목설정.sh
      - POST https://lms.knu.ac.kr/ilos/st/course/eclass_room2.acl
      - x-www-form-urlencoded로 KJKEY={과목ID}&returnData=json&returnURI=%252Filos%252Fst%252Fcourse%252Fsubmain_form.acl&encoding=utf-8를 넣는다.
      - 쿠키 유지해서 요청
      - isError가 false면 정상, true면 오류
      - 현재 세션의 과목을 설정한다.
    - 5. 강의자료목록.sh
      - POST https://lms.knu.ac.kr/ilos/st/course/lecture_material_list.acl
      - x-www-form-urlencoded로 ud={학번}&ky={과목ID}&start=&display=1&SCH_VALUE=&encoding=utf-8를 넣는다.
      - 쿠키 유지
      - body > table > tbody의 n번째 자식(tr)
        - body > table > tbody > tr:nth-child(n) > td.left > a > div.subjt_top의 value에 게시글 제목이 있다.
        - 정규화 시 -> 'body > table > tbody > tr > td.left > div.subjt_top' -> 목록을 얻을 수 있다.
        - body > table > tbody > tr:nth-child(n) > td:nth-child(4) > div > div의 id에 file_list_{파일목록ID}가 있다.
        - 정규화시 -> 'body > table > tbody > tr > td:nth-child(4) > div > img' -> 목록을 얻을 수 있다.
    - 6. 강의자료파일목록.sh
      - POST https://lms.knu.ac.kr/ilos/co/list_file_list2.acl
      - x-www-form-urlencoded로 ud={학번}&ky={과목ID}&CONTENT_SEQ={파일목록ID}&pf_st_flag=2&encoding=utf-8을 넣는다.
      - 쿠키 유지
      - div > div.list_div > div > div:nth-child(2) > div.file_list_nm > a의 onclick에 파일 다운로드 경로가 포함되어있다. (정규화도 동일)
      - 전체 파일 다운로드는 zip 파일로 나옴
    - 7. 강의자료파일다운로드.sh
      - GET {해당다운로드 경로} -L --referer ";auto"
      - 쿠키유지
      - 출력으로 pdf가 나온다.
    - 8. 로그아웃.sh
      - GET https://lms.knu.ac.kr/ilos/lo/logout.acl
      - 쿠키 유지

◎ 각 단계별 HTML 요청 유형
  - 공통점
    - Connection: keep-alive
    - Accept-Encoding: gzip
    - Accept-Language: ko-KR
    - Host: lms.knu.ac.kr
    - "sec-ch-ua: " Not A;Brand";v="99", "Chromium";v="96", "Google Chrome";v="96"
    - sec-ch-ua-mobile: ?0
    - sec-ch-ua-platform: \"Windows\"
    - Sec-Fetch-Stie: same-origin
    - User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.93 Safari/537.36
  - 모두 다른 점
    - Referer: 각 요청마다 따로 설정
    - data: POST 여부에 따라 달라짐
    - 출력: 요청마다 다름
  - Sec-Fetch-XXX 헤더 유형
    - i. 이동없음
      - Accept: */*
      - Sec-Fetch-Dest: empty
      - Sec-Fetch-Mode: cors
      - X-Requested-With: XMLHttpRequest
    - ii. 이동있음
      - Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
      - Sec-Fetch-Dest: document
      - Sec-Fetch-Mode: navigate
      - Sec-Fetch-User: ?1
      - Upgrade-Insecure-Requests: 1
  - 1. 로그인
    - url: https://lms.knu.ac.kr/ilos/lo/login.acl
    - Referer: https://lms.knu.ac.kr/ilos/main/member/login_form.acl
    - data: usr_id={usr_id}&usr_pwd={usr_pwd}&encoding=utf-8
    - Sec 유형: 이동없음(i)
    - 출력: application/json, Content-Encoding: X 
      - isError로 오류 여부 반환
  - 2. 개인정보
    - url: https://lms.knu.ac.kr/ilos/mp/myinfo_form.acl
    - Referer: https://lms.knu.ac.kr/ilos/mp/myinfo_form.acl
    - data: 없음
    - Sec 유형: 이동있음(ii)
    - 출력: text/html, Content-Encoding: gzip
      - #content_text > div:nth-child(1) > div:nth-child(6) > table > tbody > tr:nth-child(1) > td:nth-child(2)
      - 정규화 후 -c 옵션으로 "{student_name}({student_number})를 알 수 있다.
  - 3. 메인
    - url: https://lms.knu.ac.kr/ilos/main/main_form.acl
    - Referer: https://lms.knu.ac.kr/ilos/main/member/login_form.acl
    - data: 없음
    - Sec 유형: 미분류
      - Sec-Fetch-Dest와 Sec-Fetch-Mode는 유형i
      - Sec-Fetch-User와 Upgrade-Insecure-Requests는 유형ii
    - 출력: text/html, Content-Encoding: gzip
      - #contentsIndex > div.index-leftarea02 > div:nth-child(2) > ol > li > em
      - kj 속성에서 과목 ID
      - innerText에서 과목 이름
  - 4. 과목설정
    - url: https://lms.knu.ac.kr/ilos/st/course/eclass_room2.acl
    - Referer: https://lms.knu.ac.kr/ilos/main/member/login_form.acl
    - data: KJKEY={KJKEY}&returnData=json&returnURI=%252Filos%252Fst%252Fcourse%252Fsubmain_form.acl&encoding=utf-8
    - Sec 유형: 이동없음(i)
    - 반환: application/json, Content-Encoding: X
      - isError로 오류여부 반환
  - 5. 강의자료목록
    - url: https://lms.knu.ac.kr/ilos/st/course/lecture_material_list.acl
    - Referer: https://lms.knu.ac.kr/ilos/st/course/lecture_material_list_form.acl
    - data: "ud={student_number}&ky={subject_key}&start=&display=1&SCH_VALUE=&encoding=utf-8
    - Sec 유형: 이동없음(i)
    - 반환: text/html, Content-Encoding: X
      - body > table > tbody > tr > td:nth-child(4) > div > div
        - id 속성에 "file_list_{파일목록id}"
      - body > table > tbody > tr > td.left > div.subjt_top
        - InnerText에 강의자료 이름
      - body > table > tbody > tr:nth-child(1) > td.center.impt.impt_off
        - impt_seq에 강의자료 id
  - 6. 강의자료파일목록
    - url: https://lms.knu.ac.kr/ilos/co/list_file_list2.acl
    - Referer: https://lms.knu.ac.kr/ilos/st/course/lecture_material_list_form.acl
    - data: ud={student_number}&ky={subject_key}&CONTENT_SEQ={files_id}&pf_st_flag=2&encoding=utf-8
    - Sec: 유형: 이동없음(i)
      - Accept만 이동있음(ii)
    - 출력: text/html
      - body > div > div.list_div > div > div:nth-child(1) > div.file_list_nm > a
        - onclick 속성에 "location.href={download_link}"
  - 7. 강의자료파일다운로드
    - url: download_link (강의자료 파일목록에서 얻은 링크)
    - 옵션: -L -referer ";auto"
    - Referer: https://lms.knu.ac.kr/ilos/st/course/lecture_material_view_form.acl?ARTL_NUM={강의자료id}&SCH_KEY=&SCH_VALUE=&display=1&start=1
    - Sec 유형: 이동있음(ii)
      - Accept는 이동없음(i)
      - Sec-Fetch-Dest는 iframe
    - 출력: 
      - zip 파일. 
      - unzip -o "압축해제할 파일" -d "출력디렉토리"으로 풀기


◎ html 파일에서 script 태그 없애기
  - sed 's/<script.*<\/script>//g;/<script/,/<\/script>/{/<script/!{/<\/script>/!d}};s/<script.*//g;s/.*<\/script>//g'
  - sed 
  - sed는 편집기 명령어이다.

◎ linux css 셀렉터, hxselect
  - hxselect, hxnormalize는 html-xml-utils 패키지에 들어있다.
  - hxnormalize -x 원본파일명 > 출력파일명
    - hxnormalize는 html 문서출력기이며 -x 옵션을 주면 원본파일을 Well-formed XML 문서로 만든다.
  - hxselect 'css선택자' < 파일명
    - html 문서에서 css 선택자를 적용해 결과를 출력한다.
  - hxselect -c 'css선택자' < 파일명
    - 선택한 노드 자체는 빼고 노드가 포함한 내용물만 추출하고 싶을 때 -c 옵션을 지정한다.
  - hxselect -s '구분자' 'css선택자' < 파일명
    - 선택자로 여러개의 노드가 선택되는 경우에, 각 노드 사이의 구분자를 출력하는 경우 -s 옵션을 지정한다.

◎ 명령어 등록하는 방법
  - 리눅스는 명령어를 찾을 때 $PATH에 있는 디렉토리들을 순차적으로 검사하며 찾는다.
  - 사용자 명령어는 /usr/local/bin에 넣으면 된다.

◎ 긴 옵션
  - <getopt.h> 헤더의 getopt_long을 사용한다.

◎ 문자열 glob 패턴 검사
  - <fnmatch.h>의 fnmatch 함수를 사용한다.

◎ 압축파일 해제
  - zip 파일: https://stackoverflow.com/questions/10440113/simple-way-to-unzip-a-zip-file-using-zlib
    - libzip 사용
  - 일단 명령어를 사용하고 나중에 시간나면 라이브러리 링킹해서 사용하자.

◎ 임시 파일 이름 만들기
  - mktemp를 만든다.

◎ json 라이브러리
  - json-c 사용: https://rection34.tistory.com/81

◎ Cgreen
  - BDD/TDD 라이브러리
  - github을 통해 설치할 수 있다. 
  - 참조: https://cgreen-devs.github.io/
  - BDD 테스트
    - <code name="words_tests.c">
      #include <cgreen/cgreen.h>
      #include <cgreen/mocks.h>
      
      #include "words.h"
 ㅁ    #include <string.h>
      
      Describe(Words);
      BeforeEach(Words) {}
      AfterEach(Words) {}
      
      Ensure(Words, returns_word_count) {
        char* sentence = strdup("Birds of a feather");
        int word_count = split_words(sentence);
        assert_that(word_count, is_equal_to(4));
        free(sentence);
      }
      
      Ensure(Words, converts_spaces_to_zeros) {
        char* sentence = strdup("Birds of a feather");
        int length = strlen(sentence);
        split_words(sentence);
        int comparision = memcmp("Birds\0of\0a\0feather", sentence, length);
        assert_that(comparision, is_equal_to(0));
      }
      
      void mocked_callback(const char* word, void* memo) {
        mock(word, memo);
      }
      
      Ensure(Words, invokes_callback_once_for_single_word_sentence) {
        expect(mocked_callback, when(word, is_equal_to_string("Birds")));
        expect(mocked_callback, when(word, is_equal_to_string("of")));
        expect(mocked_callback, when(word, is_equal_to_string("a")));
        expect(mocked_callback, when(word, is_equal_to_string("feather")));
        words("Birds of a feather", &mocked_callback, NULL);
      }
      
      TestSuite* words_tests() {
        TestSuite* suite = create_test_suite();
        add_test_with_context(suite, Words, returns_word_count);
        add_test_with_context(suite, Words, converts_spaces_to_zeros);
        add_test_with_context(suite, Words, invokes_callback_once_for_single_word_sentence);
        return suite;
      }
    - </code>

    - <code filename="all_tests.c">
      #include <cgreen/cgreen.h>

      TestSuite* words_tests();
      
      int main(int argc, char* argv[]) {
          TestSuite* suite = create_test_suite();
          add_suite(suite, words_tests());
          if (argc > 1) {
            return run_single_test(suite, argv[1], create_text_reporter());
          }
          return run_test_suite(suite, create_text_reporter());
      }
    - </code>

  - mock 함수
    - mock은 매크로 함수로 함수로 감싸 expect류 함수와 when(parameter, constraint) 함수, 혹은 will_*류 함수를 섞어 사용한다.
    - <code>
      static int reader(void *stream) {
        return (int)mock(stream);
      }
      
      static void writer(void *stream, char *paragraph) {
          mock(stream, paragraph);
      }
      
      Ensure(Formatter, makes_one_letter_paragraph_from_one_character_input) {
          expect(reader, will_return('a'));
          always_expect(reader, will_return(EOF));
          expect(writer, when(paragraph, is_equal_to_string("a")));
          by_paragraph(&reader, NULL, &writer, NULL);
      }
    - </code>
